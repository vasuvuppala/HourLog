drop procedure if exists migrate_events;
create procedure migrate_events()
begin
	set @BASE_CHANGE_NUM = 60000;
	truncate source_event;
	truncate facility_status_event;
	truncate vault_event;
	truncate expr_event;
	truncate mode_event;
	truncate beam_event;
	truncate breakdown_event; 
	
	call migrate_logs();
	call migrate_log_changes(@BASE_CHANGE_NUM);	
	
	-- compare a log entry with the previous one using row numbers (snum)
	set @row := 0;
	drop table if exists temp_log;
	create table temp_log select l.*, @row := @row + 1 as snum from HourLog.logDetails l where l.experiment_number in (select number from experiment) order by ocrDateTime asc; 
	insert into temp_log(snum) value(0); /* to get initial events */
	alter table temp_log add unique index(snum), add index(id);
	
	-- compare log changes with the previous log entry
	drop table if exists temp_chg;
	create table temp_chg select c.*, snum from HourLog.logChanges c, temp_log t, experiment e where t.id = c.logId and c.experiment_number = e.number;
	update temp_chg set id = id + @BASE_CHANGE_NUM;
	alter table temp_chg add index(snum);
	
	-- for converting breakdown status columns to rows
	drop table if exists temp_brk;
	create table temp_brk(num int, name varchar(32));
	insert into temp_brk(num,name) values (1,'rfStatus'), (2,'vacStatus'), (3,'daqStatus'), (4,'psStatus'), (5,'ctlStatus'), (6,'utlStatus'), (7,'cryStatus'), (8,'safStatus'), (9,'othStatus'), (10,'detStatus'), (11,'magStatus'), (12,'ecrStatus'), (13,'motStatus'), (14,'dflStatus');
	
	call migrate_current_events();
	call migrate_obsolete_events();
	-- drop table temp_log, temp_chg, temp_brk;
	
	select 'Migrated', count(*), 'facility status events' from facility_status_event;
	select 'Migrated', count(*), 'source events'  from source_event;
	select 'Migrated', count(*), 'vault events' from vault_event;
	select 'Migrated', count(*), 'experiment events' from expr_event;
	select 'Migrated', count(*), 'mode events'  from mode_event;
	select 'Migrated', count(*), 'beam events'  from beam_event;
	select 'Migrated', count(*), 'breakdown events'  from breakdown_event;
	
end	
##
--
--
drop procedure if exists migrate_logs;
create procedure migrate_logs()
begin
	declare noLogsOld, noLogsNew,noLogsBlank,noNotesOld,noNotesNew INT default 0;
	
	insert into note(id,note_text,logbook)
	   select id,notes,1 from HourLog.notes;
	   
    insert into event(event_id,facility,author,occurred_at,note)  
	  select l.id, 1, l.userID, l.ocrDateTime, IF(noteID = 0, NULL, noteID)
	    from  experiment e, HourLog.logDetails l
	       LEFT JOIN HourLog.notes n ON l.noteId = n.id
	       where l.experiment_number = e.number;

	select count(*) into noLogsOld from HourLog.logDetails;
	select count(*) into noLogsBlank from HourLog.logDetails where noteID = 0;
	select count(*) into noLogsNew from event;
	select count(*) into noNotesOld from HourLog.notes;
	select count(*) into noNotesNew from note;
	
	select noLogsOLd, noLogsNew, noLogsBlank, noNotesOld, noNotesNew;
	if noLogsOld = noLogsNew then
	   select 'Migration of logs: successful';
	else
	   select 'Migration of logs: failed';
	   set @MIG_SUCCESS = FALSE;
	end if;
end	
##
--
-- param: base_num - number to be added to ids of log changes and note changes
--
drop procedure if exists migrate_log_changes;
create procedure migrate_log_changes(IN base_num INT)
begin
	declare noLogsOld, noLogsNew, noLogsOrphan INT default 0;
	
	insert into note(id,note_text,logbook)
	   select base_num + id,notes,1 from HourLog.changedNotes;
	   
	-- joining with logDetails is not needed but there are 11 orphan records in logChanges; they do not have corresponding log in logDetails.
    
	insert into event(event_id,facility,original_event,author,occurred_at,note)  
	     select base_num + l.id, 1, l.logId, l.userID, l.changedDate, IF(l.noteID = 0, NULL, l.noteID + base_num) 
		 from  HourLog.logDetails d, experiment e, HourLog.logChanges l  
		    LEFT JOIN HourLog.changedNotes n ON l.noteID = n.id where l.logId = d.id and d.experiment_number = e.number;

	select count(*) into noLogsOld from HourLog.logChanges;
	select count(*) into noLogsOrphan from HourLog.logChanges where logId not in (select id from HourLog.logDetails);
	select count(*) into noLogsNew from event where event_id >= base_num;
	select noLogsOld 'Num of Old Log Changes', noLogsNew 'Num of New Log Changes', noLogsOrphan 'Num of Orphan Logs'; 
	
	if noLogsOld = noLogsNew + noLogsOrphan then
	   select 'Migration of log changes: successful';
	else
	   select 'Migration of log changes: failed';
	   set @MIG_SUCCESS = FALSE;
	end if;
end
##
--
-- Migrate current events
drop procedure if exists migrate_current_events;
create procedure migrate_current_events()
begin
	declare noFstatOldValid,noFstatOldAll,noFstatNew INT default 0;	
	declare no_more_rows BOOLEAN default FALSE;
	declare c_num INT;
	declare c_name VARCHAR(32);
	declare cur1 cursor for select num, name from temp_brk;
	declare CONTINUE HANDLER FOR NOT FOUND SET no_more_rows = TRUE;		
	 
	-- facilty status events
    insert into facility_status_event(facility_status,event)  
	  select b.summary,b.id from temp_log a, temp_log b where a.snum = b.snum - 1 and not a.summary <=> b.summary;

	-- source events
	insert into source_event(source,event)  
	  select b.source, b.id from temp_log a, temp_log b where a.snum = b.snum - 1 and not a.source <=> b.source;
	
	-- vault events  
	insert into vault_event(vault,event)  
	  select b.vault, b.id from temp_log a, temp_log b where a.snum = b.snum - 1 and not a.vault <=> b.vault;

	-- mode events
	insert into mode_event(mode,event)  
	  select b.mode, b.id from temp_log a, temp_log b where a.snum = b.snum - 1 and not a.mode <=> b.mode;

	-- experiment events
	insert into expr_event(experiment,event)  
	  select b.experiment_number, b.id from temp_log a, temp_log b where a.snum = b.snum - 1 and not a.experiment_number <=> b.experiment_number;
	
    -- beam events
	insert into beam_event(beam_system,beam,event) 
	   select 1, IF(b.k500Beam = 0, NULL, b.k500Beam), b.id from temp_log a, temp_log b where a.snum = b.snum - 1 and not a.k500Beam <=> b.k500Beam;
	
    insert into beam_event(beam_system,beam,event) 
	   select 2, IF(b.k1200Beam = 0, NULL, b.k1200Beam), b.id from temp_log a, temp_log b where a.snum = b.snum - 1 and not a.k1200Beam <=> b.k1200Beam;
	
	-- needs only comparison with element and massnumber. rest may be taken out
	insert into beam_event(beam_system,element,charge,energy,mass_number,event) 
	   select 3,IF(b.a1900Element = 0,NULL,b.a1900Element), b.a1900Charge, b.a1900Energy, b.a1900MassNumber, b.id 
	   from temp_log a, temp_log b where a.snum = b.snum - 1 and not (a.a1900Energy <=> b.a1900Energy and a.a1900MassNumber <=> b.a1900MassNumber and a.a1900Element <=> b.a1900Element and a.a1900Charge <=> b.a1900Charge);	   
	
	-- breakdown events	
	open cur1;
	brk_loop: loop
	    fetch cur1 into c_num, c_name;
		if (no_more_rows) then
		    leave brk_loop;
		end if;
		set @stmt := concat('insert into breakdown_event(category,status,event) select ', c_num, ', b.', c_name, ', b.id from temp_log a, temp_log b where a.snum = b.snum - 1 and not a.',c_name,' <=> b.', c_name);
		-- select @stmt as 'Query';
		prepare insert_brkevents from @stmt;
        execute insert_brkevents;
	end loop;
	close cur1;
end
##
--
-- Migrate changed events
drop procedure if exists migrate_obsolete_events;
create procedure migrate_obsolete_events()
begin
	declare no_more_rows BOOLEAN default FALSE;
	declare c_num INT;
	declare c_name VARCHAR(32);
	declare cur1 cursor for select num, name from temp_brk;
	declare CONTINUE HANDLER FOR NOT FOUND SET no_more_rows = TRUE;		
	 
	-- facility status events
    insert into facility_status_event(facility_status,event)  
	  select b.summary,b.id from temp_log a, temp_chg b where a.snum = b.snum - 1 and not a.summary <=> b.summary;

	-- source events
	insert into source_event(source,event)  
	  select b.source, b.id from temp_log a, temp_chg b where a.snum = b.snum - 1 and not a.source <=> b.source;
	
	-- vault events  
	insert into vault_event(vault,event)  
	  select b.vault, b.id from temp_log a, temp_chg b where a.snum = b.snum - 1 and not a.vault <=> b.vault;

	-- mode events
	insert into mode_event(mode,event)  
	  select b.mode, b.id from temp_log a, temp_chg b where a.snum = b.snum - 1 and not a.mode <=> b.mode;

	-- experiment events
	insert into expr_event(experiment,event)  
	  select b.experiment_number, b.id from temp_log a, temp_chg b where a.snum = b.snum - 1 and not a.experiment_number <=> b.experiment_number;
	
    -- beam events
	insert into beam_event(beam_system,beam,event) 
	   select 1, IF(b.k500Beam = 0, NULL, b.k500Beam), b.id from temp_log a, temp_chg b where a.snum = b.snum - 1 and not a.k500Beam <=> b.k500Beam;
	
    insert into beam_event(beam_system,beam,event) 
	   select 2, IF(b.k1200Beam = 0, NULL, b.k1200Beam), b.id from temp_log a, temp_chg b where a.snum = b.snum - 1 and not a.k1200Beam <=> b.k1200Beam;
	
	insert into beam_event(beam_system,element,charge,energy,mass_number,event) 
	   select 3,IF(b.a1900Element = 0,NULL,b.a1900Element), b.a1900Charge, b.a1900Energy, b.a1900MassNumber, b.id 
	   from temp_log a, temp_chg b where a.snum = b.snum - 1 and not (a.a1900Energy <=> b.a1900Energy or a.a1900MassNumber <=> b.a1900MassNumber or a.a1900Element <=> b.a1900Element or a.a1900Charge <=> b.a1900Charge);	   
	
	-- breakdown events	
	open cur1;
	brk_loop: loop
	    fetch cur1 into c_num, c_name;
		if (no_more_rows) then
		    leave brk_loop;
		end if;
		set @stmt := concat('insert into breakdown_event(category,status,event) select ', c_num, ', b.', c_name, ', b.id from temp_log a, temp_chg b where a.snum = b.snum - 1 and not a.',c_name,' <=> b.', c_name);
		-- select @stmt as 'Query';
		prepare insert_brkevents from @stmt;
        execute insert_brkevents;
	end loop;
	close cur1;
end
##

