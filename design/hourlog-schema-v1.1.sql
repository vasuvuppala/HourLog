--   -------------------------------------------------- 
--   Generated by Enterprise Architect Version 9.2.921
--   Created On : Monday, 04 May, 2015 
--   DBMS       : MySql 
--   -------------------------------------------------- 


SET FOREIGN_KEY_CHECKS=0;


--  Drop Tables, Stored Procedures and Views 

DROP TABLE IF EXISTS api_client CASCADE;
DROP TABLE IF EXISTS artifact CASCADE;
DROP TABLE IF EXISTS auth_operation CASCADE;
DROP TABLE IF EXISTS auth_permission CASCADE;
DROP TABLE IF EXISTS auth_resource CASCADE;
DROP TABLE IF EXISTS auth_role CASCADE;
DROP TABLE IF EXISTS auth_user_role CASCADE;
DROP TABLE IF EXISTS beam CASCADE;
DROP TABLE IF EXISTS beam_event CASCADE;
DROP TABLE IF EXISTS beam_system CASCADE;
DROP TABLE IF EXISTS breakdown_category CASCADE;
DROP TABLE IF EXISTS breakdown_event CASCADE;
DROP TABLE IF EXISTS breakdown_status CASCADE;
DROP TABLE IF EXISTS control_signal CASCADE;
DROP TABLE IF EXISTS element CASCADE;
DROP TABLE IF EXISTS event CASCADE;
DROP TABLE IF EXISTS experiment CASCADE;
DROP TABLE IF EXISTS expr_event CASCADE;
DROP TABLE IF EXISTS external_service CASCADE;
DROP TABLE IF EXISTS facility CASCADE;
DROP TABLE IF EXISTS log_cache CASCADE;
DROP TABLE IF EXISTS log_entry CASCADE;
DROP TABLE IF EXISTS logbook CASCADE;
DROP TABLE IF EXISTS mode CASCADE;
DROP TABLE IF EXISTS mode_event CASCADE;
DROP TABLE IF EXISTS operations_role CASCADE;
DROP TABLE IF EXISTS shift CASCADE;
DROP TABLE IF EXISTS shift_staff_member CASCADE;
DROP TABLE IF EXISTS shift_status CASCADE;
DROP TABLE IF EXISTS snapshot CASCADE;
DROP TABLE IF EXISTS snapshot_event CASCADE;
DROP TABLE IF EXISTS source CASCADE;
DROP TABLE IF EXISTS source_event CASCADE;
DROP TABLE IF EXISTS staff_role CASCADE;
DROP TABLE IF EXISTS summary CASCADE;
DROP TABLE IF EXISTS summary_event CASCADE;
DROP TABLE IF EXISTS system_property CASCADE;
DROP TABLE IF EXISTS sysuser CASCADE;
DROP TABLE IF EXISTS training_record CASCADE;
DROP TABLE IF EXISTS trouble_report CASCADE;
DROP TABLE IF EXISTS user_preference CASCADE;
DROP TABLE IF EXISTS vault CASCADE;
DROP TABLE IF EXISTS vault_event CASCADE;

--  Create Tables 
CREATE TABLE api_client
(
	id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
	name VARCHAR(64) NOT NULL,
	api_key VARCHAR(255) NOT NULL,
	api_password VARCHAR(255),
	description VARCHAR(255) NOT NULL,
	contact_name VARCHAR(128) NOT NULL,
	contact_email VARCHAR(128),
	comments VARCHAR(255),
	PRIMARY KEY (id)

) ENGINE=InnoDB COMMENT='a client that uses hour log API';


CREATE TABLE artifact
(
	artifact_id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
	type CHAR(1) NOT NULL COMMENT 'd - doc, t - trouble report, u - url',
	name VARCHAR(64) NOT NULL,
	log_entry INTEGER UNSIGNED NOT NULL,
	resource_id TEXT NOT NULL COMMENT 'resource identifier: URL, TR number, file name etc',
	description VARCHAR(255),
	version INTEGER UNSIGNED NOT NULL DEFAULT 0,
	PRIMARY KEY (artifact_id),
	KEY (log_entry)

) ENGINE=InnoDB;


CREATE TABLE auth_operation
(
	operation_id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
	name VARCHAR(64) NOT NULL,
	description VARCHAR(255) NOT NULL,
	PRIMARY KEY (operation_id),
	UNIQUE UQ_auth_operation_name(name)

) ENGINE=InnoDB;


CREATE TABLE auth_permission
(
	privilege_id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
	role INTEGER UNSIGNED NOT NULL,
	operation INTEGER UNSIGNED NOT NULL,
	resource INTEGER UNSIGNED NOT NULL,
	version INTEGER UNSIGNED NOT NULL DEFAULT 0 COMMENT 'for concurrency control',
	PRIMARY KEY (privilege_id),
	KEY (operation),
	KEY (resource),
	KEY (role)

) ENGINE=InnoDB COMMENT='a role''s allowed operation on a resource';


CREATE TABLE auth_resource
(
	resource_id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
	name VARCHAR(128) NOT NULL,
	description VARCHAR(255) NOT NULL,
	version INTEGER UNSIGNED NOT NULL DEFAULT 0 COMMENT 'for optimistic concurrency control',
	PRIMARY KEY (resource_id),
	UNIQUE UQ_resource_name(name)

) ENGINE=InnoDB;


CREATE TABLE auth_role
(
	role_id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
	role_name VARCHAR(64) NOT NULL,
	description VARCHAR(255) NOT NULL,
	version INTEGER NOT NULL DEFAULT 0,
	PRIMARY KEY (role_id),
	UNIQUE UQ_role_role_name(role_name)

) ENGINE=InnoDB COMMENT='each row is a role that defines authorization';


CREATE TABLE auth_user_role
(
	user_role_id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
	user INTEGER UNSIGNED NOT NULL,
	role INTEGER UNSIGNED NOT NULL,
	can_delegate BOOL NOT NULL DEFAULT false,
	is_role_manager BOOL NOT NULL DEFAULT false,
	start_time TIMESTAMP,
	end_time TIMESTAMP,
	comment VARCHAR(255),
	version INTEGER NOT NULL DEFAULT 0,
	PRIMARY KEY (user_role_id),
	KEY (user),
	KEY (role)

) ENGINE=InnoDB;


CREATE TABLE beam
(
	beam_id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
	beam_system TINYINT UNSIGNED NOT NULL,
	element SMALLINT UNSIGNED NOT NULL,
	charge INTEGER NOT NULL,
	mass_number INTEGER NOT NULL,
	energy FLOAT(0) NOT NULL,
	version INTEGER UNSIGNED NOT NULL DEFAULT 0,
	PRIMARY KEY (beam_id),
	KEY (beam_system),
	KEY (element)

) ENGINE=InnoDB COMMENT='each row is a beam';


CREATE TABLE beam_event
(
	id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
	beam_system TINYINT UNSIGNED NOT NULL,
	beam SMALLINT UNSIGNED,
	element SMALLINT UNSIGNED,
	mass_number INTEGER,
	charge INTEGER,
	energy FLOAT(0),
	event INTEGER UNSIGNED NOT NULL,
	version INTEGER UNSIGNED NOT NULL DEFAULT 0,
	PRIMARY KEY (id),
	KEY (beam),
	KEY (beam_system),
	KEY (element),
	KEY (event)

) ENGINE=InnoDB COMMENT='beam event in a log entry';


CREATE TABLE beam_system
(
	beam_system_id TINYINT UNSIGNED NOT NULL AUTO_INCREMENT,
	name VARCHAR(16) NOT NULL,
	facility TINYINT UNSIGNED NOT NULL,
	description VARCHAR(255),
	active BOOL NOT NULL DEFAULT TRUE,
	version INTEGER UNSIGNED NOT NULL DEFAULT 0,
	PRIMARY KEY (beam_system_id),
	UNIQUE UQ_beam_system_name(name),
	KEY (facility)

) ENGINE=InnoDB COMMENT='a beam-related system in a facility';


CREATE TABLE breakdown_category
(
	brkcat_id TINYINT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Each row represents a system such as RF, Vaccuum, Cryo, Detector etc',
	name VARCHAR(64) NOT NULL,
	description VARCHAR(255) NOT NULL,
	parent INTEGER UNSIGNED,
	active BOOL NOT NULL DEFAULT TRUE,
	version INTEGER NOT NULL DEFAULT 0,
	PRIMARY KEY (brkcat_id),
	UNIQUE UQ_component_name(name)

) ENGINE=InnoDB;


CREATE TABLE breakdown_event
(
	id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
	category TINYINT UNSIGNED NOT NULL,
	failed BOOL NOT NULL DEFAULT false,
	event INTEGER UNSIGNED NOT NULL,
	PRIMARY KEY (id),
	KEY (category),
	KEY (event)

) ENGINE=InnoDB COMMENT='a breakdown event in a log entry';


CREATE TABLE breakdown_status
(
	brk_status_id TINYINT UNSIGNED NOT NULL AUTO_INCREMENT,
	name VARCHAR(32) NOT NULL,
	description VARCHAR(255) NOT NULL,
	version INTEGER UNSIGNED NOT NULL DEFAULT 0,
	PRIMARY KEY (brk_status_id),
	UNIQUE UQ_breakdown_status_name(name)

) ENGINE=InnoDB COMMENT='Not used anymore. To be removed.';


CREATE TABLE control_signal
(
	signal_id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
	name VARCHAR(128) NOT NULL,
	description VARCHAR(255) NOT NULL,
	facility TINYINT UNSIGNED NOT NULL,
	PRIMARY KEY (signal_id),
	KEY (facility)

) ENGINE=InnoDB COMMENT='a control system signal of interest';


CREATE TABLE element
(
	element_id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
	symbol VARCHAR(8) NOT NULL,
	name VARCHAR(128) NOT NULL,
	version INTEGER UNSIGNED NOT NULL DEFAULT 0 COMMENT 'for concurrency control',
	PRIMARY KEY (element_id),
	UNIQUE UQ_element_symbol(symbol)

) ENGINE=InnoDB;


CREATE TABLE event
(
	event_id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
	facility TINYINT UNSIGNED NOT NULL,
	occurred_at DATETIME NOT NULL COMMENT 'Event started at this time. Can be in the past.',
	event_entered_at DATETIME NOT NULL COMMENT 'Event was reported at this time',
	reported_by INTEGER UNSIGNED NOT NULL COMMENT 'user who reported it',
	obsoleted_by INTEGER UNSIGNED COMMENT 'Obsoleted by this event',
	note INTEGER UNSIGNED COMMENT 'Reference to log entry',
	log_entered_at DATETIME NOT NULL COMMENT 'Used for matching edited log entries with edited events.',
	version INTEGER NOT NULL DEFAULT 0,
	PRIMARY KEY (event_id),
	KEY (facility),
	KEY (reported_by),
	KEY (obsoleted_by),
	INDEX IX_occurred_at (occurred_at ASC),
	INDEX IX_log_entered_at (log_entered_at ASC)

) ENGINE=InnoDB COMMENT='Each row is an event occurring in a facility';


CREATE TABLE experiment
(
	number INTEGER UNSIGNED NOT NULL,
	spokesperson VARCHAR(128),
	title VARCHAR(128),
	hours_approved INTEGER,
	hours_requested INTEGER,
	experiment_completed VARCHAR(3),
	description TEXT,
	a1900_contact VARCHAR(64),
	approval_date DATE,
	PAC SMALLINT,
	completion_date DATE,
	on_target_hours INTEGER,
	in_charge VARCHAR(128),
	updated_at DATETIME COMMENT 'time last updated at',
	PRIMARY KEY (number)

) ENGINE=InnoDB;


CREATE TABLE expr_event
(
	id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
	experiment INTEGER UNSIGNED NOT NULL,
	event INTEGER UNSIGNED NOT NULL,
	PRIMARY KEY (id),
	KEY (event),
	KEY (experiment)

) ENGINE=InnoDB;


CREATE TABLE external_service
(
	service_id INTEGER NOT NULL,
	name VARCHAR(64) NOT NULL,
	description VARCHAR(255) NOT NULL,
	base_url TEXT,
	status VARCHAR(32) NOT NULL,
	status_message VARCHAR(255) NOT NULL,
	PRIMARY KEY (service_id),
	UNIQUE UQ_external_service_name(name)

) ENGINE=InnoDB COMMENT='an external service like Trouble Reports';


CREATE TABLE facility
(
	facility_id TINYINT UNSIGNED NOT NULL AUTO_INCREMENT,
	facility_name VARCHAR(32) NOT NULL,
	description VARCHAR(255) NOT NULL,
	ops_logbook SMALLINT UNSIGNED COMMENT 'operations logbook',
	in_operation BOOL NOT NULL DEFAULT true COMMENT 'is in operation',
	version INTEGER NOT NULL DEFAULT 0,
	PRIMARY KEY (facility_id),
	UNIQUE UQ_facility_facility_name(facility_name),
	KEY (ops_logbook)

) ENGINE=InnoDB;


CREATE TABLE log_cache
(
	id INTEGER UNSIGNED NOT NULL,
	logbook VARCHAR(255),
	author VARCHAR(128),
	entered_at DATETIME,
	occurred_at DATETIME,
	log_text TEXT,
	updated_at DATETIME COMMENT 'time last updated at',
	PRIMARY KEY (id)

) ENGINE=InnoDB COMMENT='cache of log entries ';


CREATE TABLE log_entry
(
	log_entry_id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
	logbook SMALLINT UNSIGNED NOT NULL,
	log_text TEXT NOT NULL,
	author VARCHAR(32) NOT NULL,
	occurred_at DATETIME NOT NULL,
	entered_at DATETIME NOT NULL,
	sysuser INTEGER UNSIGNED NOT NULL COMMENT 'User who made the log entry',
	obsoleted_by INTEGER UNSIGNED,
	version INTEGER UNSIGNED NOT NULL DEFAULT 0,
	PRIMARY KEY (log_entry_id),
	KEY (obsoleted_by),
	KEY (sysuser),
	KEY (logbook)

) ENGINE=InnoDB COMMENT='a log entry';


CREATE TABLE logbook
(
	logbook_id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
	logbook_name VARCHAR(32) NOT NULL,
	description VARCHAR(255) NOT NULL,
	version INTEGER NOT NULL DEFAULT 0 COMMENT 'for concurrency control',
	PRIMARY KEY (logbook_id),
	UNIQUE UQ_logbook_logbook_name(logbook_name)

) ENGINE=InnoDB COMMENT='each row represents a facility''s logbook';


CREATE TABLE mode
(
	mode_id TINYINT UNSIGNED NOT NULL AUTO_INCREMENT,
	name VARCHAR(16) NOT NULL,
	description VARCHAR(255) NOT NULL,
	active BOOL NOT NULL DEFAULT TRUE,
	PRIMARY KEY (mode_id),
	UNIQUE UQ_mode_name(name)

) ENGINE=InnoDB;


CREATE TABLE mode_event
(
	id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
	mode TINYINT UNSIGNED NOT NULL,
	event INTEGER UNSIGNED NOT NULL,
	PRIMARY KEY (id),
	KEY (event),
	KEY (mode)

) ENGINE=InnoDB;


CREATE TABLE operations_role
(
	op_role_id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
	name VARCHAR(64) NOT NULL,
	description VARCHAR(255),
	active BOOL NOT NULL DEFAULT TRUE,
	version INTEGER UNSIGNED NOT NULL DEFAULT 0,
	PRIMARY KEY (op_role_id),
	UNIQUE UQ_job_name(name)

) ENGINE=InnoDB COMMENT='role of an operations staff member';


CREATE TABLE shift
(
	shift_id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
	facility TINYINT UNSIGNED NOT NULL,
	started_at DATETIME NOT NULL,
	started_by INTEGER UNSIGNED COMMENT 'shift started by. can be null due to legacy data.',
	op_in_charge INTEGER UNSIGNED COMMENT 'operator in charge. can be null due to legacy data.',
	exp_in_charge VARCHAR(128) COMMENT 'experimenter in charge. can be null due to legacy data.',
	note INTEGER UNSIGNED NOT NULL COMMENT 'id of log text ',
	PRIMARY KEY (shift_id),
	KEY (facility),
	KEY (op_in_charge),
	KEY (started_by)

) ENGINE=InnoDB COMMENT='each row is a shift of a facility';


CREATE TABLE shift_staff_member
(
	ssm_id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
	shift INTEGER UNSIGNED NOT NULL,
	staff_member INTEGER UNSIGNED NOT NULL,
	role SMALLINT UNSIGNED NOT NULL,
	status TINYINT UNSIGNED NOT NULL,
	send_sms BOOL NOT NULL DEFAULT false COMMENT 'send sms in case of UOF',
	PRIMARY KEY (ssm_id),
	KEY (staff_member),
	KEY (role),
	KEY (shift),
	KEY (status)

) ENGINE=InnoDB COMMENT='a staff member on a shift';


CREATE TABLE shift_status
(
	status_id TINYINT UNSIGNED NOT NULL AUTO_INCREMENT,
	name VARCHAR(32) NOT NULL,
	description VARCHAR(255) NOT NULL,
	version INTEGER NOT NULL DEFAULT 0,
	PRIMARY KEY (status_id),
	UNIQUE UQ_shift_ostatus_name(name)

) ENGINE=InnoDB COMMENT='on shift status - on call, in house etc';


CREATE TABLE snapshot
(
	snapshot_id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
	taken_at DATETIME NOT NULL,
	facility TINYINT UNSIGNED NOT NULL,
	reference_id BIGINT COMMENT 'reference to log entry or something else',
	PRIMARY KEY (snapshot_id),
	KEY (facility)

) ENGINE=InnoDB COMMENT='snapshot of the facility status at an instance (future use)';


CREATE TABLE snapshot_event
(
	id INTEGER UNSIGNED NOT NULL,
	snapshot INTEGER UNSIGNED NOT NULL,
	event INTEGER UNSIGNED NOT NULL,
	PRIMARY KEY (id),
	KEY (event),
	KEY (snapshot)

) ENGINE=InnoDB COMMENT='an event in a snapshot (for future use)';


CREATE TABLE source
(
	source_id TINYINT UNSIGNED NOT NULL AUTO_INCREMENT,
	facility TINYINT UNSIGNED NOT NULL,
	name VARCHAR(32) NOT NULL,
	description VARCHAR(255) NOT NULL,
	active BOOL NOT NULL DEFAULT TRUE,
	PRIMARY KEY (source_id),
	UNIQUE UQ_source_name(name),
	KEY (facility)

) ENGINE=InnoDB COMMENT='beam source';


CREATE TABLE source_event
(
	id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
	source TINYINT UNSIGNED NOT NULL,
	event INTEGER UNSIGNED NOT NULL,
	PRIMARY KEY (id),
	KEY (event),
	KEY (source)

) ENGINE=InnoDB;


CREATE TABLE staff_role
(
	staff_role_id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
	staff_member INTEGER UNSIGNED NOT NULL,
	role SMALLINT UNSIGNED NOT NULL,
	version INTEGER UNSIGNED NOT NULL DEFAULT 0,
	PRIMARY KEY (staff_role_id),
	KEY (staff_member),
	KEY (role)

) ENGINE=InnoDB COMMENT='role an operations staff member performs';


CREATE TABLE summary
(
	summary_id TINYINT UNSIGNED NOT NULL AUTO_INCREMENT,
	name VARCHAR(32) NOT NULL,
	description VARCHAR(255) NOT NULL,
	parent TINYINT UNSIGNED COMMENT 'statuses  have hierarchy. id of parent.',
	active BOOL NOT NULL DEFAULT TRUE,
	version INTEGER NOT NULL DEFAULT 0,
	PRIMARY KEY (summary_id),
	UNIQUE UQ_summary_name(name),
	KEY (parent)

) ENGINE=InnoDB COMMENT='summary status of a facility';


CREATE TABLE summary_event
(
	id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
	summary TINYINT UNSIGNED NOT NULL,
	event INTEGER UNSIGNED NOT NULL,
	PRIMARY KEY (id),
	KEY (event),
	KEY (summary)

) ENGINE=InnoDB;


CREATE TABLE system_property
(
	id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
	name VARCHAR(64) NOT NULL,
	prop_value VARCHAR(255),
	PRIMARY KEY (id),
	UNIQUE UQ_system_property_name(name)

) ENGINE=InnoDB COMMENT='each row is a property of Hour Log System';


CREATE TABLE sysuser
(
	user_id INTEGER UNSIGNED NOT NULL,
	first_name VARCHAR(128) NOT NULL,
	last_name VARCHAR(128) NOT NULL,
	login_id VARCHAR(32) COMMENT 'login name',
	nick_name VARCHAR(16) COMMENT 'shorter name',
	department VARCHAR(64),
	email VARCHAR(128),
	job INTEGER UNSIGNED,
	current_employee BOOL NOT NULL DEFAULT FALSE COMMENT 'current employee?',
	operations_staff BOOL NOT NULL DEFAULT FALSE COMMENT 'operations staff member?',
	sms_address VARCHAR(64) COMMENT 'email address to contact via sms etc',
	version INTEGER UNSIGNED NOT NULL DEFAULT 0,
	PRIMARY KEY (user_id)

) ENGINE=InnoDB COMMENT='person who is or has been a user of the application';


CREATE TABLE training_record
(
	employee_number INTEGER UNSIGNED NOT NULL,
	employee_id VARCHAR(64),
	last_name VARCHAR(128),
	first_name VARCHAR(128),
	work_email VARCHAR(255),
	oic BOOL COMMENT 'valid training as operator-in-charge?',
	updated_at DATETIME COMMENT 'time last updated at ',
	PRIMARY KEY (employee_number)

) ENGINE=InnoDB COMMENT='each row is a (cached) training record';


CREATE TABLE trouble_report
(
	id INTEGER UNSIGNED NOT NULL,
	report_date DATE NOT NULL,
	problem TEXT,
	system VARCHAR(255),
	employee_uniq_name VARCHAR(64),
	employee_id INTEGER UNSIGNED,
	employee_name VARCHAR(255),
	updated_at DATETIME COMMENT 'time last updated at',
	PRIMARY KEY (id)

) ENGINE=InnoDB COMMENT='each row is a (cached) trouble report';


CREATE TABLE user_preference
(
	user_preference_id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
	user INTEGER UNSIGNED NOT NULL,
	name VARCHAR(64) NOT NULL,
	pref_value VARCHAR(64),
	version INTEGER UNSIGNED NOT NULL DEFAULT 0,
	PRIMARY KEY (user_preference_id),
	KEY (user)

) ENGINE=InnoDB COMMENT='a user preference';


CREATE TABLE vault
(
	vault_id TINYINT UNSIGNED NOT NULL AUTO_INCREMENT,
	name VARCHAR(8) NOT NULL,
	description VARCHAR(255) NOT NULL,
	active BOOL NOT NULL DEFAULT TRUE,
	facility TINYINT UNSIGNED NOT NULL,
	version INTEGER UNSIGNED NOT NULL DEFAULT 0,
	PRIMARY KEY (vault_id),
	UNIQUE UQ_vault_name(name),
	KEY (facility)

) ENGINE=InnoDB COMMENT='experiment vault';


CREATE TABLE vault_event
(
	id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
	vault TINYINT UNSIGNED NOT NULL,
	event INTEGER UNSIGNED NOT NULL,
	PRIMARY KEY (id),
	KEY (event),
	KEY (vault)

) ENGINE=InnoDB;



SET FOREIGN_KEY_CHECKS=1;


--  Create Foreign Key Constraints 
ALTER TABLE artifact ADD CONSTRAINT FK_artifact_log_entry 
	FOREIGN KEY (log_entry) REFERENCES log_entry (log_entry_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE auth_permission ADD CONSTRAINT FK_permission_auth_operation 
	FOREIGN KEY (operation) REFERENCES auth_operation (operation_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE auth_permission ADD CONSTRAINT FK_permission_resource 
	FOREIGN KEY (resource) REFERENCES auth_resource (resource_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE auth_permission ADD CONSTRAINT FK_priv_role 
	FOREIGN KEY (role) REFERENCES auth_role (role_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE auth_user_role ADD CONSTRAINT FK_user_role_employee 
	FOREIGN KEY (user) REFERENCES sysuser (user_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE auth_user_role ADD CONSTRAINT FK_user_role_role 
	FOREIGN KEY (role) REFERENCES auth_role (role_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE beam ADD CONSTRAINT FK_beam_beam_system 
	FOREIGN KEY (beam_system) REFERENCES beam_system (beam_system_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE beam ADD CONSTRAINT FK_beam_element 
	FOREIGN KEY (element) REFERENCES element (element_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE beam_event ADD CONSTRAINT FK_beam_log_beam 
	FOREIGN KEY (beam) REFERENCES beam (beam_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE beam_event ADD CONSTRAINT FK_beam_log_beam_system 
	FOREIGN KEY (beam_system) REFERENCES beam_system (beam_system_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE beam_event ADD CONSTRAINT FK_beam_log_element 
	FOREIGN KEY (element) REFERENCES element (element_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE beam_event ADD CONSTRAINT FK_beam_event_event 
	FOREIGN KEY (event) REFERENCES event (event_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE beam_system ADD CONSTRAINT FK_beam_system_facility 
	FOREIGN KEY (facility) REFERENCES facility (facility_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE breakdown_event ADD CONSTRAINT FK_breakdown_event_breakdown_category 
	FOREIGN KEY (category) REFERENCES breakdown_category (brkcat_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE breakdown_event ADD CONSTRAINT FK_breakdownt_status_log_entry 
	FOREIGN KEY (event) REFERENCES event (event_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE control_signal ADD CONSTRAINT FK_control_signal_facility 
	FOREIGN KEY (facility) REFERENCES facility (facility_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE event ADD CONSTRAINT FK_event_facility 
	FOREIGN KEY (facility) REFERENCES facility (facility_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE event ADD CONSTRAINT FK_event_sysuser 
	FOREIGN KEY (reported_by) REFERENCES sysuser (user_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE event ADD CONSTRAINT FK_event_event 
	FOREIGN KEY (obsoleted_by) REFERENCES event (event_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE expr_event ADD CONSTRAINT FK_expr_event_event 
	FOREIGN KEY (event) REFERENCES event (event_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE expr_event ADD CONSTRAINT FK_expr_event_experiment 
	FOREIGN KEY (experiment) REFERENCES experiment (number)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE facility ADD CONSTRAINT FK_facility_logbook 
	FOREIGN KEY (ops_logbook) REFERENCES logbook (logbook_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE log_entry ADD CONSTRAINT FK_log_entry_log_entry 
	FOREIGN KEY (obsoleted_by) REFERENCES log_entry (log_entry_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE log_entry ADD CONSTRAINT FK_log_entry_sysuser 
	FOREIGN KEY (sysuser) REFERENCES sysuser (user_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE log_entry ADD CONSTRAINT FK_note_logbook 
	FOREIGN KEY (logbook) REFERENCES logbook (logbook_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE mode_event ADD CONSTRAINT FK_mode_event_event 
	FOREIGN KEY (event) REFERENCES event (event_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE mode_event ADD CONSTRAINT FK_mode_event_mode 
	FOREIGN KEY (mode) REFERENCES mode (mode_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE shift ADD CONSTRAINT FK_shift_facility 
	FOREIGN KEY (facility) REFERENCES facility (facility_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE shift ADD CONSTRAINT FK_shift_OIC 
	FOREIGN KEY (op_in_charge) REFERENCES sysuser (user_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE shift ADD CONSTRAINT FK_shift_started_by 
	FOREIGN KEY (started_by) REFERENCES sysuser (user_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE shift_staff_member ADD CONSTRAINT FK_shift_staff_member_employee 
	FOREIGN KEY (staff_member) REFERENCES sysuser (user_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE shift_staff_member ADD CONSTRAINT FK_shift_staff_member_operations_role 
	FOREIGN KEY (role) REFERENCES operations_role (op_role_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE shift_staff_member ADD CONSTRAINT FK_shift_staff_member_shift 
	FOREIGN KEY (shift) REFERENCES shift (shift_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE shift_staff_member ADD CONSTRAINT FK_shift_staff_member_shift_ostatus 
	FOREIGN KEY (status) REFERENCES shift_status (status_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE snapshot ADD CONSTRAINT FK_snapshot_facility 
	FOREIGN KEY (facility) REFERENCES facility (facility_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE snapshot_event ADD CONSTRAINT FK_snapshot_event_event 
	FOREIGN KEY (event) REFERENCES event (event_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE snapshot_event ADD CONSTRAINT FK_snapshot_event_snapshot 
	FOREIGN KEY (snapshot) REFERENCES snapshot (snapshot_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE source ADD CONSTRAINT FK_source_facility 
	FOREIGN KEY (facility) REFERENCES facility (facility_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE source_event ADD CONSTRAINT FK_source_event_event 
	FOREIGN KEY (event) REFERENCES event (event_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE source_event ADD CONSTRAINT FK_source_event_source 
	FOREIGN KEY (source) REFERENCES source (source_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE staff_role ADD CONSTRAINT FK_staff_role_employee 
	FOREIGN KEY (staff_member) REFERENCES sysuser (user_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE staff_role ADD CONSTRAINT FK_staff_role_operations_role 
	FOREIGN KEY (role) REFERENCES operations_role (op_role_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE summary ADD CONSTRAINT FK_summary_summary 
	FOREIGN KEY (parent) REFERENCES summary (summary_id);

ALTER TABLE summary_event ADD CONSTRAINT FK_summary_event_event 
	FOREIGN KEY (event) REFERENCES event (event_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE summary_event ADD CONSTRAINT FK_summary_event_summary 
	FOREIGN KEY (summary) REFERENCES summary (summary_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE user_preference ADD CONSTRAINT FK_user_preference_employee 
	FOREIGN KEY (user) REFERENCES sysuser (user_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE vault ADD CONSTRAINT FK_vault_facility 
	FOREIGN KEY (facility) REFERENCES facility (facility_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE vault_event ADD CONSTRAINT FK_vault_event_event 
	FOREIGN KEY (event) REFERENCES event (event_id)
	ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE vault_event ADD CONSTRAINT FK_vault_event_vault 
	FOREIGN KEY (vault) REFERENCES vault (vault_id)
	ON DELETE RESTRICT ON UPDATE RESTRICT;
